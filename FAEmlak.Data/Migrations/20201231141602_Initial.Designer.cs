// <auto-generated />
using System;
using FAEmlak.Data.Concrete.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FAEMlak.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201231141602_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FAEmlak.Data.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "İstanbul"
                        },
                        new
                        {
                            CityId = 2,
                            Name = "Ankara"
                        });
                });

            modelBuilder.Entity("FAEmlak.Data.FavoriteItem", b =>
                {
                    b.Property<int>("FavoriteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavoriteItemId");

                    b.HasIndex("PropertyId");

                    b.ToTable("FavoriteItems");
                });

            modelBuilder.Entity("FAEmlak.Data.Photo", b =>
                {
                    b.Property<long>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            PhotoId = 1L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 2L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 3L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 4L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 5L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 6L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 7L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 1
                        },
                        new
                        {
                            PhotoId = 8L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 9L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 10L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 11L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 12L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 13L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 14L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 2
                        },
                        new
                        {
                            PhotoId = 15L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 16L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 17L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 18L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 19L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 20L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 21L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 3
                        },
                        new
                        {
                            PhotoId = 22L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 23L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 24L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 25L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 26L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 27L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 28L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 4
                        },
                        new
                        {
                            PhotoId = 29L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 30L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 31L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 32L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 33L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 34L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 35L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 5
                        },
                        new
                        {
                            PhotoId = 36L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 37L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 38L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 39L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 40L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 41L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 42L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 6
                        },
                        new
                        {
                            PhotoId = 43L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 44L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 45L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 46L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 47L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 48L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 49L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 7
                        },
                        new
                        {
                            PhotoId = 50L,
                            IsDefault = false,
                            PhotoPath = "1.jpg",
                            PropertyId = 8
                        },
                        new
                        {
                            PhotoId = 51L,
                            IsDefault = false,
                            PhotoPath = "2.jpg",
                            PropertyId = 8
                        },
                        new
                        {
                            PhotoId = 52L,
                            IsDefault = false,
                            PhotoPath = "3.jpg",
                            PropertyId = 8
                        },
                        new
                        {
                            PhotoId = 53L,
                            IsDefault = false,
                            PhotoPath = "4.jpg",
                            PropertyId = 8
                        },
                        new
                        {
                            PhotoId = 54L,
                            IsDefault = false,
                            PhotoPath = "5.jpg",
                            PropertyId = 8
                        },
                        new
                        {
                            PhotoId = 55L,
                            IsDefault = false,
                            PhotoPath = "6.jpg",
                            PropertyId = 8
                        },
                        new
                        {
                            PhotoId = 56L,
                            IsDefault = false,
                            PhotoPath = "7.jpg",
                            PropertyId = 8
                        });
                });

            modelBuilder.Entity("FAEmlak.Data.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<byte>("BathroomCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BuildingAge")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("FloorCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasBalcony")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStuff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInSite")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PropertyCategory")
                        .HasColumnType("int");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("WhichFloor")
                        .HasColumnType("tinyint");

                    b.HasKey("PropertyId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Area = 125,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 751, DateTimeKind.Utc).AddTicks(5500),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In ultricies commodo vehicula. Vestibulum pharetra ullamcorper ante, sit amet molestie eros imperdiet consequat. Integer dapibus urna vulputate consequat posuere. Aliquam erat volutpat. Integer non malesuada lectus. Vivamus ut mattis leo. Sed ornare nunc diam, eu sollicitudin est luctus at. Integer ante mauris, imperdiet vitae leo sit amet, semper pharetra lacus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
                            FloorCount = (byte)13,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 850000,
                            PropertyCategory = 0,
                            PropertyType = 1,
                            RoomCount = 3,
                            StateId = 2,
                            Status = 0,
                            Title = "SAHRAYICEDİT İNTAŞ SİTESİNDE PARK MANZARALI 3+1 DAİRE",
                            UserId = "1",
                            WhichFloor = (byte)2
                        },
                        new
                        {
                            PropertyId = 2,
                            Area = 125,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1160),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In ultricies commodo vehicula. Vestibulum pharetra ullamcorper ante, sit amet molestie eros imperdiet consequat. Integer dapibus urna vulputate consequat posuere. Aliquam erat volutpat. Integer non malesuada lectus. Vivamus ut mattis leo. Sed ornare nunc diam, eu sollicitudin est luctus at. Integer ante mauris, imperdiet vitae leo sit amet, semper pharetra lacus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.",
                            FloorCount = (byte)13,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 516152,
                            PropertyCategory = 0,
                            PropertyType = 3,
                            RoomCount = 0,
                            StateId = 2,
                            Status = 0,
                            Title = "Uğurmumcu Süper Bina Süper Fırsat",
                            UserId = "1",
                            WhichFloor = (byte)2
                        },
                        new
                        {
                            PropertyId = 3,
                            Area = 120,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1310),
                            Description = "Isı Ve Ses Yalıtımı ile Yaz Kış Ferah ve Sessiz./nLed Spot ve Dekoratif Işıklandırma ile Şık ve Kullanış﻿lı﻿.",
                            FloorCount = (byte)10,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 220000,
                            PropertyCategory = 0,
                            PropertyType = 3,
                            RoomCount = 2,
                            StateId = 2,
                            Status = 0,
                            Title = "BEYLİKDÜZÜ KALEDEN HAFTANIN EN AVANTAJLI SATILIK 2+1 DAİRESİ !!!",
                            UserId = "1",
                            WhichFloor = (byte)5
                        },
                        new
                        {
                            PropertyId = 4,
                            Area = 100,
                            BathroomCount = (byte)2,
                            BuildingAge = (byte)16,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1330),
                            Description = "Betonarme Taşıyıcı Sistemleri/nIsı Yalıtımıyla Donatılmış Dış cephe Kaplama",
                            FloorCount = (byte)13,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 419000,
                            PropertyCategory = 1,
                            PropertyType = 1,
                            RoomCount = 2,
                            StateId = 2,
                            Status = 0,
                            Title = "ROTA YAPI'DAN İSKANLI,OTOPARKLI BUTİK SİTEDE 2+1 SATILIK DAİRE",
                            UserId = "1",
                            WhichFloor = (byte)2
                        },
                        new
                        {
                            PropertyId = 5,
                            Area = 105,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1350),
                            Description = "Araçlarınız Binici Fiyatından Takas Yapılabilir",
                            FloorCount = (byte)13,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 547452,
                            PropertyCategory = 2,
                            PropertyType = 2,
                            RoomCount = 4,
                            StateId = 2,
                            Status = 0,
                            Title = "BEYLİKDÜZÜ'NDE DENİZ MANZARALI GENİŞ ULTRA LÜX DUBLEX FIRSATI",
                            UserId = "1",
                            WhichFloor = (byte)2
                        },
                        new
                        {
                            PropertyId = 6,
                            Area = 105,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1360),
                            Description = "Araçlarınız Binici Fiyatından Takas Yapılabilir",
                            FloorCount = (byte)2,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 134899,
                            PropertyCategory = 1,
                            PropertyType = 0,
                            RoomCount = 0,
                            StateId = 2,
                            Status = 0,
                            Title = "BEYLİKDÜZÜNDE 35BİN NAKİT AYLIK 1450 TL ÖDEME İLE SATILIK DAİRE",
                            UserId = "1",
                            WhichFloor = (byte)1
                        },
                        new
                        {
                            PropertyId = 7,
                            Area = 115,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1380),
                            Description = "200m2 Yaşam Alanına Sahiptir.",
                            FloorCount = (byte)1,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 220000,
                            PropertyCategory = 1,
                            PropertyType = 0,
                            RoomCount = 2,
                            StateId = 2,
                            Status = 0,
                            Title = "YILIN SON FIRSAT KELEPİR DAİRESİ 2+1 SATILIK DAİRE",
                            UserId = "1",
                            WhichFloor = (byte)1
                        },
                        new
                        {
                            PropertyId = 8,
                            Area = 105,
                            BathroomCount = (byte)1,
                            BuildingAge = (byte)26,
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 752, DateTimeKind.Utc).AddTicks(1390),
                            Description = "Dairemiz Merkezi Konumda Olup Oldukça geniş Ve Kullanışlı Bir Dairedir..",
                            FloorCount = (byte)5,
                            HasBalcony = true,
                            HasStuff = false,
                            IsInSite = true,
                            Price = 315000,
                            PropertyCategory = 2,
                            PropertyType = 2,
                            RoomCount = 3,
                            StateId = 2,
                            Status = 0,
                            Title = "Emlakoffice 3+1 200m2 Merkezde Satılık Geniş Daire",
                            UserId = "1",
                            WhichFloor = (byte)2
                        });
                });

            modelBuilder.Entity("FAEmlak.Data.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Kartal"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Kadıköy"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Maltepe"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            Name = "Pendik"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            Name = "Ataşehir"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Name = "Mamak"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 2,
                            Name = "Beypazarı"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            Name = "Keçiören"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 2,
                            Name = "Çankaya"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 2,
                            Name = "Etimesgut"
                        });
                });

            modelBuilder.Entity("FAEmlak.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04315281-0478-4501-9124-5f9622ff04ca",
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 716, DateTimeKind.Utc).AddTicks(4150),
                            Email = "g181210106@sakarya.edu.tr",
                            EmailConfirmed = true,
                            FirstName = "Alperen",
                            LastName = "Derin",
                            LockoutEnabled = false,
                            NormalizedEmail = "G181210106@SAKARYA.EDU.TR",
                            NormalizedUserName = "G181210106@SAKARYA.EDU.TR",
                            PasswordHash = "AQAAAAEAACcQAAAAEATS4ydg3cqDDeF9qml5e13SnjfR227XAps4xZ2NVTHHq78Th41qFJe24X7RD28Hug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "deb2e643-7d20-4544-a154-5eb84fa2d435",
                            TwoFactorEnabled = false,
                            UserName = "g181210106@sakarya.edu.tr"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a8c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62dda824-98a2-4ed6-a53d-a3fce76c6f4f",
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 732, DateTimeKind.Utc).AddTicks(5180),
                            Email = "b181210091@sakarya.edu.tr",
                            EmailConfirmed = true,
                            FirstName = "Furkan",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "B181210091@SAKARYA.EDU.TR",
                            NormalizedUserName = "B181210091@SAKARYA.EDU.TR",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPmlYNUoY1iZgG0EdwmSoIPMA53DGtbJ1hlb+ZJnOmzFO3BpuRy88ez/eZ33wkRbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf0713e4-5389-415f-82af-9c6b98e76ca3",
                            TwoFactorEnabled = false,
                            UserName = "b181210091@sakarya.edu.tr"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c54e0ed-bafa-45e1-a080-847d5a362027",
                            Created = new DateTime(2020, 12, 31, 14, 16, 1, 741, DateTimeKind.Utc).AddTicks(9490),
                            Email = "denemeEmlak@deneme.com",
                            EmailConfirmed = true,
                            FirstName = "Deneme",
                            LastName = "Emlak",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENEMEEMLAK@DENEME.COM",
                            NormalizedUserName = "DENEMEEMLAK@DENEME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENPNWLviau8lLCFYus2Hxpa/6BW0Fpj0SXQC3Zt2unfHq2Em92qDgzUTp2hUrDjTow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "694b918a-ecb5-4ecd-8eca-91eba979b09c",
                            TwoFactorEnabled = false,
                            UserName = "denemeEmlak@deneme.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "539a644f-54ad-427d-9473-737ca4ee23b8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d5efd7210",
                            ConcurrencyStamp = "e67b1846-b66c-4c23-bef0-b34efc20437c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a8c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d5efd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FAEmlak.Data.FavoriteItem", b =>
                {
                    b.HasOne("FAEmlak.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FAEmlak.Data.Photo", b =>
                {
                    b.HasOne("FAEmlak.Data.Property", "Property")
                        .WithMany("Photos")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FAEmlak.Data.Property", b =>
                {
                    b.HasOne("FAEmlak.Data.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAEmlak.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FAEmlak.Data.State", b =>
                {
                    b.HasOne("FAEmlak.Data.City", "City")
                        .WithMany("States")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FAEmlak.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FAEmlak.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FAEmlak.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FAEmlak.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
